
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link rel="stylesheet" type="text/css" href="/css/style.css">
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/mqtt/dist/mqtt.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {

           // Konfiguracja klienta MQTT
        const mqttConfig = {
            clientId: 'webclient_' + Math.random().toString(16).substr(2, 8),
            protocol: 'ws',
            hostname: 'localhost',
            port: 8000,
            path: '/mqtt', 
            keepalive: 60,
            reconnectPeriod: 5000,
            connectTimeout: 30 * 1000,
            clean: true
        };

        
        const client = mqtt.connect(`ws://${mqttConfig.hostname}:${mqttConfig.port}${mqttConfig.path}`, mqttConfig);


            const socket = io();
            const userId = '<%= user.id %>';
            const userRole = '<%= user.role %>';
            
            socket.emit('user_connected', userId);
            socket.userId = userId;

            socket.on('connect', () => {
                console.log('Socket connected, joining room:', userId);
                socket.emit('user_connected', userId);
            });

            socket.on('connect_error', (error) => {
                console.error('Socket connection error:', error);
            });


            // Status update handling
            socket.on('status_update', ({ userId, isOnline }) => {
                const statusElements = document.querySelectorAll(`[data-user-status="${userId}"]`);
                statusElements.forEach(element => {
                    element.textContent = isOnline ? 'Dostępny(a)' : 'Niedostępny(a)';
                    element.className = `status-indicator ${isOnline ? 'online' : 'offline'}`;
                });
            });

            // KIEROWCA
            if (userRole === 'kierowca') {
            // Jeśli otrzyma nowe zaproszenie to ma się dodać
            socket.on('new_invitation', (data) => {
                console.log(data);
                
                const invitationsList = document.querySelector('.invitations-section');
                if (invitationsList) {
                    // Skasowanie komunikatu o tym, że nie ma zaproszeń
                    const noInvitationsMsg = invitationsList.querySelector('p');
                    if (noInvitationsMsg) {
                        noInvitationsMsg.remove();
                    }

                    const newInvitation = `
                        <div class="invitation-card">
                            <p>Spedytor: ${data.spedytorName} ${data.spedytorSurname}</p>
                            <div class="invitation-actions">
                                <form action="/api/job/respond-invitation/${data.invitation._id}" method="POST" style="display: inline;">
                                    <input type="hidden" name="response" value="accept">
                                    <button type="submit" class="btn-accept">Akceptuj</button>
                                </form>
                                <form action="/api/job/respond-invitation/${data.invitation._id}" method="POST" style="display: inline;">
                                    <input type="hidden" name="response" value="reject">
                                    <button type="submit" class="btn-reject">Odrzuć</button>
                                </form>
                            </div>
                        </div>
                    `;
                    invitationsList.insertAdjacentHTML('beforeend', newInvitation);
                }
            });
            }
                

            // SPEDYTOR
            if (userRole === 'spedytor') {
                // Powiadamianie o tym, że spedytor otrzymał odpowiedź
                socket.on('driver_accepted', (data) => {
                    window.location.reload();
                });

                socket.on('driver_rejected', (data) => {
                    window.location.reload()
                });



            
            }

            // MQTT
            client.on('connect', () => {
            console.log('Browser connected to MQTT');
            client.subscribe('jobs/#');
        });

            client.on('message', (topic, message) => {
                console.log('Received:', topic, message.toString());
            });

            
            

        });



        
    </script>
</head>
<body>
    <nav class="navbar">
        <a href="/" class="brand">CargoLink</a>
        <div class="dashboard-type">
            <%= user.role %> Dashboard
        </div>
        <div class="user-section">
            <span class="user-info">
                <%= user.name %> <%= user.surname %>
            </span>
            <form action="/api/auth/logout" method="POST" style="margin: 0;">
                <button type="submit" class="logout-btn">Wyloguj</button>
            </form>
        </div>
    </nav>
    <!-- <form action="/api/auth/logout" method="POST">
        <button type="submit">Logout</button>
    </form> -->

    <!-- <main class="main-content">
        <header>
            <h1>Dashboard</h1>
        </header> -->
        
        <%- body %>
    </main>
</body>
</html>